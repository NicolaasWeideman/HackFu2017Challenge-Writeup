###################################
    CHALLENGE 05 (Cryptography)
###################################
Author: Chronic0x90er

Note: For correct formatting, please view with a monospaced font such as "Courier",
with line wrapping disabled.


CHALLENGE DESCRIPTION
=====================

  The challenge directory contains three files: a raw disk image file "my-backups.img", the
  instructions in "instructions.txt" and the encrypted solution file in "solution.txt.enc".
  The instructions suggest we need to retrieve data from a CD.


INFORMATION GATHERING
=====================

  Running the bash "file" command with "my-backups.img" as the input file, does not yield any
  valuable information. Using the bash command "fdisk" which displays information regarding the
  disk image, informs us that it does not contain a valid partition table. Using a hexeditor
  program, the header of the file can be found: "3AFF26ED", which is the header of an
  Android Sparse Image.


SOLUTION
========

  Extracting the Data
  -------------------
   An Android sparse image can be converted to a regular disk image, using the tool simg2img:
    simg2img ./my-backups.img ./my-backups_converted.img
   We can now use the bash utility "testdisk" to recover the contents of the converted IMG file.
   This is done by running:
     testdisk my-backups_converted.img
   and following the steps listed below.
     1. Select: Disk my-backups_converted.img
     2. Select: None
     3. Select: Advanced
     4. Select both: "P ext2" and "List".
     5. Press "a" to select all files.
     6. Press "C" (shift-"c") to copy all files.
     7. Select an output directory and press "C".

   The files should now be extracted to the selected output directory.



  Solving the Puzzle
  ------------------
   The extracted files include the following: A python script "encryption.py", an MP3 audio
   file "audio0.mp3", a PostScript document "file0.ps", and three encrypted
   documents "arr.txt.enc", "bee.txt.enc" and "gee.txt.enc".

   In the PostScript document, the author is stated to be:
     "That audio file has some interesting metadata..."
   The PostScript document itself features sixteen boxes, each containing a collection comprising
   three types of shapes:
     1. A quadrilateral divided into two triangles.
     2. A triangle.
     3. Two lines meeting at an angle.

   Inspecting the metadata of "audio.mp3" reveals, the title is listed as "Angle Arithmetic", the
   artist as "Acutes" and the album as "Alphabet".

   The metadata of the MP3 file suggests we need to do something with acute angles. Therefore,
   let us list the number acute angles in each type of shape found in the PostScript document:
     1. The divided quadrilateral: 6.
     2. The triangle: 3.
     3. The lines meeting at an angle: 1.

   Summing the number of acute angles for all the shapes in a box yields the numbers:
     Box  1: 3(6) + 1(3) + 2(1) = 23,
     Box  2: 0(6) + 1(3) + 2(1) =  5,
     Box  3: 1(6) + 1(3) + 1(1) = 10,
     Box  4: 3(6) + 1(3) + 0(1) = 21,
     Box  5: 3(6) + 0(3) + 1(1) = 19,
     Box  6: 3(6) + 0(3) + 2(1) = 20,
     Box  7: 1(6) + 0(3) + 0(1) =  6,
     Box  8: 1(6) + 1(3) + 0(1) =  9,
     Box  9: 3(6) + 0(3) + 0(1) = 18,
     Box 10: 0(6) + 1(3) + 2(1) =  5,
     Box 11: 1(6) + 1(3) + 0(1) =  9,
     Box 12: 2(6) + 0(3) + 2(1) = 14,
     Box 13: 3(6) + 0(3) + 1(1) = 19,
     Box 14: 1(6) + 1(3) + 0(1) =  9,
     Box 15: 1(6) + 0(3) + 1(1) =  4, and
     Box 16: 0(6) + 1(3) + 2(1) =  5

   Mapping each of these numbers to the corresponding letter of the alphabet
   (with a=1, b=2, c=3, ...), yields the phrase:
     "wejustfireinside"
   This phrase can be used to decrypt the encrypted TXT files, by executing the python
   script "encryption.py", as shown in the following example:
     python encryption.py -d -f ../my-files/arr.txt.enc -k "wejustfireinside"

   Each of the decrypted files "arr.txt", "gee.txt" and "bee.txt" contains 1200 lines, consisting
   of 100 numbers each.

   Notice that the pronunciation of "arr", "gee" and "bee" sounds similar to how one would
   pronounce the acronym "RGB". This hints that the numbers in the TXT files might be red, green
   and blue components of pixels in an image. The numbers in a line would make up the width of
   the image and the rows make up the height.

   The Python script in Listing 1 shows the relevant code used to create the image represented by
   these TXT files.
    ________________________________________________________________
   | fd_r = open(RED_FILE_NAME, 'r')                                |
   | fd_g = open(GREEN_FILE_NAME, 'r')                              |
   | fd_b = open(BLUE_FILE_NAME, 'r')                               |
   |                                                                |
   | r_lines = fd_r.readlines()                                     |
   | g_lines = fd_g.readlines()                                     |
   | b_lines = fd_b.readlines()                                     |
   |                                                                |
   | r_values = []                                                  |
   | g_values = []                                                  |
   | b_values = []                                                  |
   |                                                                |
   | for r_line, g_line, b_line in zip(r_lines, g_lines, b_lines):  |
   |   r_values.append(r_line.rstrip().split(' '))                  |
   |   g_values.append(g_line.rstrip().split(' '))                  |
   |   b_values.append(b_line.rstrip().split(' '))                  |
   |                                                                |
   | max_j, max_i = len(r_values), len(r_values[0])                 |
   | im_new = Image.new('RGB', (max_j, max_i))                      |
   | pixels = im_new.load()                                         |
   | for i in range(max_i):                                         |
   |   for j in range(max_j):                                       |
   |     r = int(r_values[j][i])                                    |
   |     g = int(g_values[j][i])                                    |
   |     b = int(b_values[j][i])                                    |
   |     pixels[j, i] = (r,g, b)                                    |
   | im_new.save(FILE_NEW)                                          |
   |________________________________________________________________|
   |Listing 1: A Python script to convert the red, green and blue   |
   | number components of the files "arr.txt", "gee.txt" and        |
   | "bee.txt" to an image.                                         |
   |________________________________________________________________|


   Viewing the image, reveals the solution to the challenge:
     "hackfuihaveseenthenightgauntsintheirhauntsandtheoldonesatthebottomofthesea"


TOOLS USED
==========

1. simg2img: https://github.com/anestisb/android-simg2img

